CHIP ALU {
    IN  
        x[16], y[16],
        zx, nx, zy, ny,
        f, no;

    OUT 
        out[16],
        zr, ng;

    PARTS:
        Mux16(a=x, b=false, sel=zx, out=px);        // px       pre-x
        Not16(in=px, out=npx);                      // npx      not-pre-x
        Mux16(a=px, b=npx, sel=nx, out=ix);         // ix       internal-x

        Mux16(a=y, b=false, sel=zy, out=py);        // py       pre-y
        Not16(in=py, out=npy);                      // npy      not-pre-y
        Mux16(a=py, b=npy, sel=ny, out=iy);         // iy       internal-y

		And16(a=ix, b=iy, out=and);
		Add16(a=ix, b=iy, out=add);
        Mux16(a=and, b=add, sel=f, out=pout);       // pout     pre-out
        Not16(in=pout, out=npout);                  // npout    not-pre-out
        Mux16(a=pout, b=npout, sel=no,
            out=out,                                // out      OUT
            out[0..7]=outl,                         // outl     out-low
            out[8..15]=outh,                        // outh     out-high
            out[15]=ng                              // ng       NG
        );
        Or8Way(in=outl, out=nzrl);                  // nzrl     not-zr-low
        Or8Way(in=outh, out=nzrh);                  // nzrh     not-zr-high
        Or(a=nzrl, b=nzrh, out=nzr);                // nzr      not-zr
        Not(in=nzr, out=zr);                        // zr       ZR
}